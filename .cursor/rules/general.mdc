---
alwaysApply: true
---

# rule: development tracking
whatever you do, keep track of the changes you make in a *.md file in .cursor/rules/dev_track/
you may decide to create a new file, split a file, or add to an existing file.

you may decide whether or not to include the prompt that you used to generate the changes.

# rule: testing practice
## When creating or modifying functionality:
- Write or update tests for any new functions, especially in /common utilities
- Include test cases for: happy path, edge cases, and error conditions
- Document untested code with TODO comments explaining why tests are missing
- For bug fixes: first write a failing test that reproduces the bug, then fix it
- Prefer simple browser-based tests over complex tooling for this educational project
- Test files should mirror source structure: /common/utils/array.js â†’ /tests/unit/array.test.js

## when adding tests:
- verify the tests pass
- if the test fails, do not hide the failing.  make sure the functionality in question is properly tested and passes.  that is:
   - do not force the test to pass while the functionality is broken.
   - do not change the tested code just to pass the test, without fixing the functionality.
   - in case of a problem, cunsult me.

## for refactoring to use common/
Any script that has ES6 import statements at the top level needs type="module".

# rule: temp files
when creating temp files, like lists, or python files to do some conversion or test, put them in directory Temp

# shortages
when I write these words, here is what i mean:

* **\message**: when writing 'message', it means 'please draft a commit message for the changes done since last commit'
suggest 2 commit messages:
- short
- very short

* **\debug**:
  1. diagnoze this bug
  2. if there is no test falling because of this bug, add a unit test.
  3. if possible, suggest a fix.
  4. if fixed and possible, test your fix.  if it needs push - say so.
  5. summarize.

**\c**: please continue

